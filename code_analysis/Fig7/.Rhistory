matlines(X, lty = 1, col = rgb(t(col2rgb(ccols[2,1])/255), alpha = 0.25), lwd = 0.5, type = 'l')
abline(h = 0)
lines(cmeans, type = 'o', lwd = 1.5, bty = 'n', col = ccols[2,1], lty = 1, pch = 16)
axis(1, at = 1:6, labels = c('-4', '-3','-2', '-1', 'Leave', '+2'), cex.axis = 1.25)
dev.off()
pdf(file.path(Dir,plotDir,'LL_diffs_forced.pdf'), width = 7, height = 4.2)
layout(t(1:2))
cx = sort(cLLs[1,1,] - cLLs[1,2,])
ccolsv = ccols[,1][(cx < 0)*1 + 1]
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.1, cex.lab = 1.1, ylab = 'LL difference', xlab = 'Participants (sorted)', ylim = c(-30, 16))
title('Stay choice')
abline(h = 0)
cx = sort(cLLs[2,1,] - cLLs[2,2,])
ccolsv = ccols[,1][(cx < 0)*1 + 1]
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.1, cex.lab = 1.1, ylab = 'LL difference', xlab = 'Participants (sorted)', ylim = c(-30, 16))
title('Leave choice')
abline(h = 0)
dev.off()
rm(list=ls())
###### load packages ------
require(R.matlab)
require(beeswarm)
require(RColorBrewer)
###### set up relevant paths ------
Dir <- here::here()
resultDir <- "results"
trialwisemodeldatDir <- "trialwise_modeldat"
statsDir <- "stats"
plotDir <- "figures"
if(!dir.exists(file.path(Dir,plotDir))){dir.create(file.path(Dir,plotDir))}
###### define custom function to make shadows ------
se_shadows<-function(x, y, se, col='#66666666', border = NA) {
# adds se shadows to data x
polygon(c(x, rev(x)), c(y + se, rev(y - se)), col = col, border = border)
}
###### set colours ------
ccols = cbind(c(rgb(0.6196, 0.0039, 0.2588), rgb(0.1974, 0.5129, 0.7403)), c(rgb(0.6196, 0.0039, 0.2588, 0.8), rgb(0.1974, 0.5129, 0.7403, 0.8)))
################
# FREE CHOICES (forced see below)
################
# define models and timepoints
models = c('global_free', 'localRRs_free')
nmodels = length(models)
timepts = c(-4:0, 2)
ntimepts = length(timepts)
# get file names
files = list(NA, NA)
for (cmodel in 1:nmodels) {
files[[cmodel]] = list.files(file.path(Dir, resultDir, trialwisemodeldatDir, models[cmodel]), pattern='tdat.mat', recursive = TRUE)
csort = sort(as.numeric(unlist(strsplit(unlist(strsplit(files[[cmodel]], 'sub')), '_tdat.mat'))), index.return = TRUE)$ix
files[[cmodel]] = files[[cmodel]][csort]
}
#load BIC scores
BICs = read.csv(file.path(Dir, resultDir, statsDir,"BICscores.csv"), header = TRUE)
# set up data arrays
nsubs = length(files[[1]])
prob_timecourses = array(NA, dim = c(ntimepts, nmodels, nsubs))
cLLs = array(NA, dim = c(3, nmodels, nsubs))
cparams = array(NA, dim = c(4, nmodels, nsubs))
cRRs = array(NA, dim = c(7,3,3,nsubs, 120))
# loop over subs and models to get an average data around each leave decision
for (csub in 1:nsubs) {
for (cmodel in 1:nmodels) {
# get data
cdat = readMat(file.path(Dir, resultDir, trialwisemodeldatDir, models[cmodel], files[[cmodel]][csub]))$trld
cntrials = length(cdat[,,1]$cchoices)
# find switches
cswitches = which(cdat[,,1]$cchoices == 2)
nswitch = length(cswitches)
# get trials around switch
cidx = sapply(cswitches, function(x) x + timepts)
# kick out trials too early or too late
cidx[which(cidx < 1)] = NA
cidx[which(cidx > cntrials)] = NA
# clean up overlap between time windows and get estimated RRs around each switch
for (cswitch in 1:(nswitch-1)) {
cddi = intersect(cidx[,cswitch], cidx[,cswitch+1])
if (length(cddi) > 0) {
cidx[which(cidx[,cswitch] %in% cddi),cswitch] = NA
cidx[which(cidx[,cswitch+1] %in% cddi),cswitch+1] = NA
}
if (cswitch < (nswitch-1) & cmodel == 2) {
cpatch = cdat[,,1]$cpatch[cswitches[cswitch+1]]
cccidx = max(max(cswitches[cswitch+1]-3, 1), cswitches[cswitch]):min(min(cswitches[cswitch+1]+3, cntrials), cswitches[cswitch+2])
cinsrt = which((cswitches[cswitch+1] + c(-3:+3)) %in% cccidx)
cRRs[cinsrt,1, cpatch, csub, cswitch] = cdat[,,1]$crewardrateSlw[cccidx]
cRRs[cinsrt,2, cpatch, csub, cswitch] = cdat[,,1]$crewardrateMid[cccidx]
cRRs[cinsrt,3, cpatch, csub, cswitch] = cdat[,,1]$crewardratesFst[cccidx]
}
}
# get probability timecourses
prob_timecourses[,cmodel,csub] = rowMeans(sapply(1:nswitch, function(x) cdat[,,1]$allprob[2,cidx[,x]]), na.rm = TRUE)
# for LLs, ingnore first trials after switch and first trials in block
cexclidx = sort(c(cswitches + 1, which(diff(c(cdat[,,1]$cblock)) > 0), 1))
cinclidx = setdiff(1:cntrials, cexclidx)
cLLs[1:2,cmodel,csub] = tapply(log(cdat[,,1]$cchoice.prob[cinclidx]), cdat[,,1]$cchoices[cinclidx], sum, na.rm = TRUE)
cLLs[3,cmodel,csub] = sum(log(cdat[,,1]$cchoice.prob[cinclidx]))
#store params
cparams[,cmodel, csub] = rowMeans(rbind(cdat[,,1]$x1, cdat[,,1]$x2, cdat[,,1]$x3, cdat[,,1]$x4))
}
}
## BIC Scores
pdf(file.path(Dir, plotDir, 'BIC_diffs_forced.pdf'), width = 4.2, height = 4.2)
cx = sort(BICs[,'global_forced'] - BICs[,'local_forced'])
ccolsv = ccols[,1][(cx > 0)*1 + 1]
par(lwd = 0.25)
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.25, cex.lab = 1.25, ylab = 'BIC difference', xlab = 'Participants (sorted)', ylim = c(-50, 110))
par(lwd = 1)
#title('Stay choice')
abline(h = 0)
dev.off()
pdf(file.path(Dir,plotDir,'BIC_diffs_free.pdf'), width = 4.2, height = 4.2)
cx = sort(BICs[,'global_free'] - BICs[,'local_free'])
ccolsv = ccols[,1][(cx > 0)*1 + 1]
par(lwd = 0.25)
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.25, cex.lab = 1.25, ylab = 'BIC difference', xlab = 'Participants (sorted)', ylim = c(-50, 110))
par(lwd = 1)
#title('Stay choice')
abline(h = 0)
dev.off()
### illustrate timecourses of choice probabilities around switch
pdf(file.path(Dir, plotDir,'timecourses_free.pdf'), width = 4.2, height = 4.2)
cmeans = apply(prob_timecourses, c(1, 2), mean, na.rm = TRUE)
csds = apply(prob_timecourses, c(1, 2), function(x) sd(x, na.rm = TRUE)/sqrt(length(x)))
matplot(matrix(c((1:6)-0.05, (1:6)+0.05), ncol = 2), cmeans, type = 'o', lwd = 2, bty = 'n', col = ccols[,1], lty = 1, pch = 16, cex.lab = 1.25, cex.axis = 1.25, ylab = 'Avg. p(Leave | Model)', xlab = 'Choice', xaxt = 'n', ylim = c(0,1))
matlines(prob_timecourses[,1,], lty = 1, col = rgb(t(col2rgb(ccols[1,1])/255), alpha = 0.1), lwd = 0.5, type = 'l')
matlines(prob_timecourses[,2,], lty = 1, col = rgb(t(col2rgb(ccols[2,1])/255), alpha = 0.1), lwd = 0.5, type = 'l')
matlines(matrix(c((1:6)-0.05, (1:6)+0.05), ncol = 2), cmeans, type = 'o', lwd = 1.5, col = ccols[,1], lty = 1, pch = 16)
axis(1, at = 1:6, labels = c('-4', '-3','-2', '-1', 'Leave', '+2'), cex.axis = 1.25)
dev.off()
### illustrate timecourses in choice probability differences
pdf(file.path(Dir, plotDir,'timecourses_diffs_free.pdf'), width = 4.2, height = 4.2)
X = apply(prob_timecourses[,2,], 2, function(x) c(1, 1, 1, 1, 0, 1) - x*c(1, 1, 1, 1, -1, 1)) - apply(prob_timecourses[,1,], 2, function(x) c(1, 1, 1, 1, 0, 1) - x*c(1, 1, 1, 1, -1, 1))
cmeans = apply(X, c(1),  mean, na.rm = TRUE)
csds = apply(X, c(1, 2), function(x) sd(x)/sqrt(length(x)))
plot(cmeans, type = 'o', lwd = 1.5, bty = 'n', col = ccols[2,1], lty = 1, pch = 16, ylim = c(-0.05, 0.1), ylab = 'p(action | GM) - p(action | LM)', xlab = 'Choice', xaxt = 'n', cex.lab = 1.25, cex.axis = 1.25)
matlines(X, lty = 1, col = rgb(t(col2rgb(ccols[2,1])/255), alpha = 0.1), lwd = 0.5, type = 'l')
abline(h = 0)
lines(cmeans, type = 'o', lwd = 1.5, bty = 'n', col = ccols[2,1], lty = 1, pch = 16)
axis(1, at = 1:6, labels = c('-4', '-3','-2', '-1', 'Leave', '+2'), cex.axis = 1.25)
dev.off()
### illustrate log likelihood differences
pdf(file.path(Dir,plotDir,'LL_diffs_free.pdf'), width = 7, height = 4.2)
layout(t(1:2))
cx = sort(cLLs[1,1,] - cLLs[1,2,])
ccolsv = ccols[,1][(cx < 0)*1 + 1]
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.1, cex.lab = 1.1, ylab = 'LL difference', xlab = 'Participants (sorted)', ylim = c(-30, 16))
title('Stay choice')
abline(h = 0)
cx = sort(cLLs[2,1,] - cLLs[2,2,])
ccolsv = ccols[,1][(cx < 0)*1 + 1]
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.1, cex.lab = 1.1, ylab = 'LL difference', xlab = 'Participants (sorted)', ylim = c(-30, 16))
title('Leave choice')
abline(h = 0)
dev.off()
### illustrate estimated internal reward rates
cRRs = apply(cRRs, c(1, 2, 3, 4), mean, na.rm = TRUE)
cmat = apply(cRRs, c(1,2,3), mean, na.rm = TRUE)
csds = apply(cRRs, c(1,2,3), function(x) sd(x, na.rm = TRUE)/sqrt(length(x)))
#layout(1:3)
pdf(file.path(Dir,plotDir,'Model_RRs_slow.pdf'), width = 4.2, height = 4.2)
i = 1
matplot(cmat[,,i], type = 'o', lwd = 1.5, bty = 'n', col = hcl.colors(5, 'viridis')[3:5], lty = 1, pch = 16, ylim = c(45, 75), ylab = 'Estimated Reward Rate', xlab = 'Choice', xaxt = 'n', cex.lab = 1.25, cex.axis = 1.25)
for (j in 1:3) {
se_shadows(1:7, cmat[,j,i], se = csds[,j,i], col = paste(hcl.colors(5, 'viridis')[j+2], '66', sep = ''))
}
matlines(cmat[,,i], type = 'o', lwd = 1.5, col = hcl.colors(5, 'viridis')[3:5], lty = 1, pch = 16)
axis(1, at = 1:7, labels = c('-3', '-2', '-1', 'Leave', '+1', '+2', '+3'), cex.axis = 1.25)
legend('topright', legend = c('Slow', 'Medium', 'Fast'), col = hcl.colors(5, 'viridis')[3:5], lty = 1, lwd = 2, bty = 'n', cex = 1.2)
dev.off()
pdf(file.path(Dir,plotDir,'Model_RRs_med.pdf'), width = 4.2, height = 4.2)
i = 2
matplot(cmat[,,i], type = 'o', lwd = 1.5, bty = 'n', col = hcl.colors(5, 'viridis')[3:5], lty = 1, pch = 16, ylim = c(45, 75), ylab = 'Estimated Reward Rate', xlab = 'Choice', xaxt = 'n', cex.lab = 1.25, cex.axis = 1.25)
for (j in 1:3) {
se_shadows(1:7, cmat[,j,i], se = csds[,j,i], col = paste(hcl.colors(5, 'viridis')[j+2], '66', sep = ''))
}
matlines(cmat[,,i], type = 'o', lwd = 1.5, col = hcl.colors(5, 'viridis')[3:5], lty = 1, pch = 16)
axis(1, at = 1:7, labels = c('-3', '-2', '-1', 'Leave', '+1', '+2', '+3'), cex.axis = 1.25)
legend('topright', legend = c('Slow', 'Medium', 'Fast'), col = hcl.colors(5, 'viridis')[3:5], lty = 1, lwd = 2, bty = 'n', cex = 1.2)
dev.off()
pdf(file.path(Dir,plotDir,'Model_RRs_fast.pdf'), width = 4.2, height = 4.2)
i = 3
matplot(cmat[,,i], type = 'o', lwd = 1.5, bty = 'n', col = hcl.colors(5, 'viridis')[3:5], lty = 1, pch = 16, ylim = c(45, 75), ylab = 'Estimated Reward Rate', xlab = 'Choice', xaxt = 'n', cex.lab = 1.25, cex.axis = 1.25)
for (j in 1:3) {
se_shadows(1:7, cmat[,j,i], se = csds[,j,i], col = paste(hcl.colors(5, 'viridis')[j+2], '66', sep = ''))
}
matlines(cmat[,,i], type = 'o', lwd = 1.5, col = hcl.colors(5, 'viridis')[3:5], lty = 1, pch = 16)
axis(1, at = 1:7, labels = c('-3', '-2', '-1', 'Leave', '+1', '+2', '+3'), cex.axis = 1.25)
legend('topright', legend = c('Slow', 'Medium', 'Fast'), col = hcl.colors(5, 'viridis')[3:5], lty = 1, lwd = 2, bty = 'n', cex = 1.2)
dev.off()
################
# FORCED CHOICES (all same as above )
################
models = c('global_forced', 'localRRs_forced')
files = list(NA, NA)
for (cmodel in 1:nmodels) {
files[[cmodel]] = list.files(file.path(Dir, resultDir, trialwisemodeldatDir, models[cmodel]), pattern='tdat.mat', recursive = TRUE)
csort = sort(as.numeric(unlist(strsplit(unlist(strsplit(files[[cmodel]], 'sub')), '_tdat.mat'))), index.return = TRUE)$ix
files[[cmodel]] = files[[cmodel]][csort]
}
nsubs = length(files[[1]])
timepts = c(-4:0, 2)
ntimepts = length(timepts)
prob_timecourses = array(NA, dim = c(ntimepts, nmodels, nsubs))
cLLs = array(NA, dim = c(3, nmodels, nsubs))
cparams = array(NA, dim = c(4, nmodels, nsubs))
for (csub in 1:nsubs) {
for (cmodel in 1:nmodels) {
cdat = readMat(file.path(Dir, resultDir, trialwisemodeldatDir, models[cmodel], files[[cmodel]][csub]))$trld
cntrials = length(cdat[,,1]$cchoices)
cswitches = which(cdat[,,1]$cchoices == 2)
nswitch = length(cswitches)
cidx = sapply(cswitches, function(x) x + timepts)
cidx[which(cidx < 1)] = NA
cidx[which(cidx > cntrials)] = NA
for (cswitch in 1:(nswitch-1)) {
cddi = intersect(cidx[,cswitch], cidx[,cswitch+1])
if (length(cddi) > 0) {
cidx[which(cidx[,cswitch] %in% cddi),cswitch] = NA
cidx[which(cidx[,cswitch+1] %in% cddi),cswitch+1] = NA
}
}
prob_timecourses[,cmodel,csub] = rowMeans(sapply(1:nswitch, function(x) cdat[,,1]$allprob[2,cidx[,x]]), na.rm = TRUE)
cexclidx = sort(c(cswitches + 1, which(diff(c(cdat[,,1]$cblock)) > 0), 1))
cinclidx = setdiff(1:cntrials, cexclidx)
cLLs[1:2,cmodel,csub] = tapply(log(cdat[,,1]$cchoice.prob[cinclidx]), cdat[,,1]$cchoices[cinclidx], sum, na.rm = TRUE)
cLLs[3,cmodel,csub] = sum(log(cdat[,,1]$cchoice.prob[cinclidx]))
cparams[,cmodel, csub] = rowMeans(rbind(cdat[,,1]$x1, cdat[,,1]$x2, cdat[,,1]$x3, cdat[,,1]$x4))
}
}
pdf(file.path(Dir,plotDir,'timecourses_forced.pdf'), width = 4.2, height = 4.2)
cmeans = apply(prob_timecourses, c(1, 2), mean, na.rm = TRUE)
csds = apply(prob_timecourses, c(1, 2), function(x) sd(x, na.rm = TRUE)/sqrt(length(x)))
matplot(matrix(c((1:6)-0.05, (1:6)+0.05), ncol = 2), cmeans, type = 'o', lwd = 2, bty = 'n', col = ccols[,1], lty = 1, pch = 16, cex.lab = 1.25, cex.axis = 1.25, ylab = 'Avg. p(Leave | Model)', xlab = 'Choice', xaxt = 'n', ylim = c(0,1))
matlines(prob_timecourses[,1,], lty = 1, col = rgb(t(col2rgb(ccols[1,1])/255), alpha = 0.1), lwd = 0.5, type = 'l')
matlines(prob_timecourses[,2,], lty = 1, col = rgb(t(col2rgb(ccols[2,1])/255), alpha = 0.1), lwd = 0.5, type = 'l')
matlines(matrix(c((1:6)-0.05, (1:6)+0.05), ncol = 2), cmeans, type = 'o', lwd = 1.5, col = ccols[,1], lty = 1, pch = 16)
axis(1, at = 1:6, labels = c('-4', '-3','-2', '-1', 'Leave', '+2'), cex.axis = 1.25)
dev.off()
### illustrate timecourses in choice probability differences
pdf(file.path(Dir,plotDir,'timecourses_diffs_forced.pdf'), width = 4.2, height = 4.2)
X = apply(prob_timecourses[,2,], 2, function(x) c(1, 1, 1, 1, 0, 1) - x*c(1, 1, 1, 1, -1, 1)) - apply(prob_timecourses[,1,], 2, function(x) c(1, 1, 1, 1, 0, 1) - x*c(1, 1, 1, 1, -1, 1))
cmeans = apply(X, c(1),  mean, na.rm = TRUE)
csds = apply(X, c(1, 2), function(x) sd(x)/sqrt(length(x)))
plot(cmeans, type = 'o', lwd = 1.5, bty = 'n', col = ccols[2,1], lty = 1, pch = 16, ylim = c(-0.05, 0.1), ylab = 'p(action | GM) - p(action | LM)', xlab = 'Choice', xaxt = 'n', cex.lab = 1.25, cex.axis = 1.25)
matlines(X, lty = 1, col = rgb(t(col2rgb(ccols[2,1])/255), alpha = 0.25), lwd = 0.5, type = 'l')
abline(h = 0)
lines(cmeans, type = 'o', lwd = 1.5, bty = 'n', col = ccols[2,1], lty = 1, pch = 16)
axis(1, at = 1:6, labels = c('-4', '-3','-2', '-1', 'Leave', '+2'), cex.axis = 1.25)
dev.off()
pdf(file.path(Dir,plotDir,'LL_diffs_forced.pdf'), width = 7, height = 4.2)
layout(t(1:2))
cx = sort(cLLs[1,1,] - cLLs[1,2,])
ccolsv = ccols[,1][(cx < 0)*1 + 1]
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.1, cex.lab = 1.1, ylab = 'LL difference', xlab = 'Participants (sorted)', ylim = c(-30, 16))
title('Stay choice')
abline(h = 0)
cx = sort(cLLs[2,1,] - cLLs[2,2,])
ccolsv = ccols[,1][(cx < 0)*1 + 1]
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.1, cex.lab = 1.1, ylab = 'LL difference', xlab = 'Participants (sorted)', ylim = c(-30, 16))
title('Leave choice')
abline(h = 0)
dev.off()
###### load packages ------
require(R.matlab)
require(beeswarm)
require(RColorBrewer)
###### set up relevant paths ------,
# To run this file, open Fig7.Rproj, then open Fig7.R
Dir <- here::here()
resultDir <- "results"
trialwisemodeldatDir <- "trialwise_data"
statsDir <- "stats"
plotDir <- "figures"
if(!dir.exists(file.path(Dir,plotDir))){dir.create(file.path(Dir,plotDir))}
###### define custom function to make shadows ------
se_shadows<-function(x, y, se, col='#66666666', border = NA) {
# adds se shadows to data x
polygon(c(x, rev(x)), c(y + se, rev(y - se)), col = col, border = border)
}
###### set colours ------
ccols = cbind(c(rgb(0.6196, 0.0039, 0.2588), rgb(0.1974, 0.5129, 0.7403)), c(rgb(0.6196, 0.0039, 0.2588, 0.8), rgb(0.1974, 0.5129, 0.7403, 0.8)))
################
# FREE CHOICES (forced see below)
################
# define models and timepoints
models = c('global_free', 'localRRs_free')
nmodels = length(models)
timepts = c(-4:0, 2)
ntimepts = length(timepts)
# get file names
files = list(NA, NA)
for (cmodel in 1:nmodels) {
files[[cmodel]] = list.files(file.path(Dir, resultDir, trialwisemodeldatDir, models[cmodel]), pattern='tdat.mat', recursive = TRUE)
csort = sort(as.numeric(unlist(strsplit(unlist(strsplit(files[[cmodel]], 'sub')), '_tdat.mat'))), index.return = TRUE)$ix
files[[cmodel]] = files[[cmodel]][csort]
}
#load BIC scores
BICs = read.csv(file.path(Dir, resultDir, statsDir,"BICscores.csv"), header = TRUE)
# set up data arrays
nsubs = length(files[[1]])
prob_timecourses = array(NA, dim = c(ntimepts, nmodels, nsubs))
cLLs = array(NA, dim = c(3, nmodels, nsubs))
cparams = array(NA, dim = c(4, nmodels, nsubs))
cRRs = array(NA, dim = c(7,3,3,nsubs, 120))
# loop over subs and models to get an average data around each leave decision
for (csub in 1:nsubs) {
for (cmodel in 1:nmodels) {
# get data
cdat = readMat(file.path(Dir, resultDir, trialwisemodeldatDir, models[cmodel], files[[cmodel]][csub]))$trld
cntrials = length(cdat[,,1]$cchoices)
# find switches
cswitches = which(cdat[,,1]$cchoices == 2)
nswitch = length(cswitches)
# get trials around switch
cidx = sapply(cswitches, function(x) x + timepts)
# kick out trials too early or too late
cidx[which(cidx < 1)] = NA
cidx[which(cidx > cntrials)] = NA
# clean up overlap between time windows and get estimated RRs around each switch
for (cswitch in 1:(nswitch-1)) {
cddi = intersect(cidx[,cswitch], cidx[,cswitch+1])
if (length(cddi) > 0) {
cidx[which(cidx[,cswitch] %in% cddi),cswitch] = NA
cidx[which(cidx[,cswitch+1] %in% cddi),cswitch+1] = NA
}
if (cswitch < (nswitch-1) & cmodel == 2) {
cpatch = cdat[,,1]$cpatch[cswitches[cswitch+1]]
cccidx = max(max(cswitches[cswitch+1]-3, 1), cswitches[cswitch]):min(min(cswitches[cswitch+1]+3, cntrials), cswitches[cswitch+2])
cinsrt = which((cswitches[cswitch+1] + c(-3:+3)) %in% cccidx)
cRRs[cinsrt,1, cpatch, csub, cswitch] = cdat[,,1]$crewardrateSlw[cccidx]
cRRs[cinsrt,2, cpatch, csub, cswitch] = cdat[,,1]$crewardrateMid[cccidx]
cRRs[cinsrt,3, cpatch, csub, cswitch] = cdat[,,1]$crewardratesFst[cccidx]
}
}
# get probability timecourses
prob_timecourses[,cmodel,csub] = rowMeans(sapply(1:nswitch, function(x) cdat[,,1]$allprob[2,cidx[,x]]), na.rm = TRUE)
# for LLs, ingnore first trials after switch and first trials in block
cexclidx = sort(c(cswitches + 1, which(diff(c(cdat[,,1]$cblock)) > 0), 1))
cinclidx = setdiff(1:cntrials, cexclidx)
cLLs[1:2,cmodel,csub] = tapply(log(cdat[,,1]$cchoice.prob[cinclidx]), cdat[,,1]$cchoices[cinclidx], sum, na.rm = TRUE)
cLLs[3,cmodel,csub] = sum(log(cdat[,,1]$cchoice.prob[cinclidx]))
#store params
cparams[,cmodel, csub] = rowMeans(rbind(cdat[,,1]$x1, cdat[,,1]$x2, cdat[,,1]$x3, cdat[,,1]$x4))
}
}
## BIC Scores
pdf(file.path(Dir, plotDir, 'BIC_diffs_forced.pdf'), width = 4.2, height = 4.2)
cx = sort(BICs[,'global_forced'] - BICs[,'local_forced'])
ccolsv = ccols[,1][(cx > 0)*1 + 1]
par(lwd = 0.25)
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.25, cex.lab = 1.25, ylab = 'BIC difference', xlab = 'Participants (sorted)', ylim = c(-50, 110))
par(lwd = 1)
#title('Stay choice')
abline(h = 0)
dev.off()
pdf(file.path(Dir,plotDir,'BIC_diffs_free.pdf'), width = 4.2, height = 4.2)
cx = sort(BICs[,'global_free'] - BICs[,'local_free'])
ccolsv = ccols[,1][(cx > 0)*1 + 1]
par(lwd = 0.25)
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.25, cex.lab = 1.25, ylab = 'BIC difference', xlab = 'Participants (sorted)', ylim = c(-50, 110))
par(lwd = 1)
#title('Stay choice')
abline(h = 0)
dev.off()
### illustrate timecourses of choice probabilities around switch
pdf(file.path(Dir, plotDir,'timecourses_free.pdf'), width = 4.2, height = 4.2)
cmeans = apply(prob_timecourses, c(1, 2), mean, na.rm = TRUE)
csds = apply(prob_timecourses, c(1, 2), function(x) sd(x, na.rm = TRUE)/sqrt(length(x)))
matplot(matrix(c((1:6)-0.05, (1:6)+0.05), ncol = 2), cmeans, type = 'o', lwd = 2, bty = 'n', col = ccols[,1], lty = 1, pch = 16, cex.lab = 1.25, cex.axis = 1.25, ylab = 'Avg. p(Leave | Model)', xlab = 'Choice', xaxt = 'n', ylim = c(0,1))
matlines(prob_timecourses[,1,], lty = 1, col = rgb(t(col2rgb(ccols[1,1])/255), alpha = 0.1), lwd = 0.5, type = 'l')
matlines(prob_timecourses[,2,], lty = 1, col = rgb(t(col2rgb(ccols[2,1])/255), alpha = 0.1), lwd = 0.5, type = 'l')
matlines(matrix(c((1:6)-0.05, (1:6)+0.05), ncol = 2), cmeans, type = 'o', lwd = 1.5, col = ccols[,1], lty = 1, pch = 16)
axis(1, at = 1:6, labels = c('-4', '-3','-2', '-1', 'Leave', '+2'), cex.axis = 1.25)
dev.off()
### illustrate timecourses in choice probability differences
pdf(file.path(Dir, plotDir,'timecourses_diffs_free.pdf'), width = 4.2, height = 4.2)
X = apply(prob_timecourses[,2,], 2, function(x) c(1, 1, 1, 1, 0, 1) - x*c(1, 1, 1, 1, -1, 1)) - apply(prob_timecourses[,1,], 2, function(x) c(1, 1, 1, 1, 0, 1) - x*c(1, 1, 1, 1, -1, 1))
cmeans = apply(X, c(1),  mean, na.rm = TRUE)
csds = apply(X, c(1, 2), function(x) sd(x)/sqrt(length(x)))
plot(cmeans, type = 'o', lwd = 1.5, bty = 'n', col = ccols[2,1], lty = 1, pch = 16, ylim = c(-0.05, 0.1), ylab = 'p(action | GM) - p(action | LM)', xlab = 'Choice', xaxt = 'n', cex.lab = 1.25, cex.axis = 1.25)
matlines(X, lty = 1, col = rgb(t(col2rgb(ccols[2,1])/255), alpha = 0.1), lwd = 0.5, type = 'l')
abline(h = 0)
lines(cmeans, type = 'o', lwd = 1.5, bty = 'n', col = ccols[2,1], lty = 1, pch = 16)
axis(1, at = 1:6, labels = c('-4', '-3','-2', '-1', 'Leave', '+2'), cex.axis = 1.25)
dev.off()
### illustrate log likelihood differences
pdf(file.path(Dir,plotDir,'LL_diffs_free.pdf'), width = 7, height = 4.2)
layout(t(1:2))
cx = sort(cLLs[1,1,] - cLLs[1,2,])
ccolsv = ccols[,1][(cx < 0)*1 + 1]
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.1, cex.lab = 1.1, ylab = 'LL difference', xlab = 'Participants (sorted)', ylim = c(-30, 16))
title('Stay choice')
abline(h = 0)
cx = sort(cLLs[2,1,] - cLLs[2,2,])
ccolsv = ccols[,1][(cx < 0)*1 + 1]
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.1, cex.lab = 1.1, ylab = 'LL difference', xlab = 'Participants (sorted)', ylim = c(-30, 16))
title('Leave choice')
abline(h = 0)
dev.off()
### illustrate estimated internal reward rates
cRRs = apply(cRRs, c(1, 2, 3, 4), mean, na.rm = TRUE)
cmat = apply(cRRs, c(1,2,3), mean, na.rm = TRUE)
csds = apply(cRRs, c(1,2,3), function(x) sd(x, na.rm = TRUE)/sqrt(length(x)))
pdf(file.path(Dir,plotDir,'Model_RRs_slow.pdf'), width = 4.2, height = 4.2)
i = 1
matplot(cmat[,,i], type = 'o', lwd = 1.5, bty = 'n', col = hcl.colors(5, 'viridis')[3:5], lty = 1, pch = 16, ylim = c(45, 75), ylab = 'Estimated Reward Rate', xlab = 'Choice', xaxt = 'n', cex.lab = 1.25, cex.axis = 1.25)
for (j in 1:3) {
se_shadows(1:7, cmat[,j,i], se = csds[,j,i], col = paste(hcl.colors(5, 'viridis')[j+2], '66', sep = ''))
}
matlines(cmat[,,i], type = 'o', lwd = 1.5, col = hcl.colors(5, 'viridis')[3:5], lty = 1, pch = 16)
axis(1, at = 1:7, labels = c('-3', '-2', '-1', 'Leave', '+1', '+2', '+3'), cex.axis = 1.25)
legend('topright', legend = c('Slow', 'Medium', 'Fast'), col = hcl.colors(5, 'viridis')[3:5], lty = 1, lwd = 2, bty = 'n', cex = 1.2)
dev.off()
pdf(file.path(Dir,plotDir,'Model_RRs_med.pdf'), width = 4.2, height = 4.2)
i = 2
matplot(cmat[,,i], type = 'o', lwd = 1.5, bty = 'n', col = hcl.colors(5, 'viridis')[3:5], lty = 1, pch = 16, ylim = c(45, 75), ylab = 'Estimated Reward Rate', xlab = 'Choice', xaxt = 'n', cex.lab = 1.25, cex.axis = 1.25)
for (j in 1:3) {
se_shadows(1:7, cmat[,j,i], se = csds[,j,i], col = paste(hcl.colors(5, 'viridis')[j+2], '66', sep = ''))
}
matlines(cmat[,,i], type = 'o', lwd = 1.5, col = hcl.colors(5, 'viridis')[3:5], lty = 1, pch = 16)
axis(1, at = 1:7, labels = c('-3', '-2', '-1', 'Leave', '+1', '+2', '+3'), cex.axis = 1.25)
legend('topright', legend = c('Slow', 'Medium', 'Fast'), col = hcl.colors(5, 'viridis')[3:5], lty = 1, lwd = 2, bty = 'n', cex = 1.2)
dev.off()
pdf(file.path(Dir,plotDir,'Model_RRs_fast.pdf'), width = 4.2, height = 4.2)
i = 3
matplot(cmat[,,i], type = 'o', lwd = 1.5, bty = 'n', col = hcl.colors(5, 'viridis')[3:5], lty = 1, pch = 16, ylim = c(45, 75), ylab = 'Estimated Reward Rate', xlab = 'Choice', xaxt = 'n', cex.lab = 1.25, cex.axis = 1.25)
for (j in 1:3) {
se_shadows(1:7, cmat[,j,i], se = csds[,j,i], col = paste(hcl.colors(5, 'viridis')[j+2], '66', sep = ''))
}
matlines(cmat[,,i], type = 'o', lwd = 1.5, col = hcl.colors(5, 'viridis')[3:5], lty = 1, pch = 16)
axis(1, at = 1:7, labels = c('-3', '-2', '-1', 'Leave', '+1', '+2', '+3'), cex.axis = 1.25)
legend('topright', legend = c('Slow', 'Medium', 'Fast'), col = hcl.colors(5, 'viridis')[3:5], lty = 1, lwd = 2, bty = 'n', cex = 1.2)
dev.off()
################
# FORCED CHOICES (same procedure as above )
################
# define models
models = c('global_forced', 'localRRs_forced')
# get file names
files = list(NA, NA)
for (cmodel in 1:nmodels) {
files[[cmodel]] = list.files(file.path(Dir, resultDir, trialwisemodeldatDir, models[cmodel]), pattern='tdat.mat', recursive = TRUE)
csort = sort(as.numeric(unlist(strsplit(unlist(strsplit(files[[cmodel]], 'sub')), '_tdat.mat'))), index.return = TRUE)$ix
files[[cmodel]] = files[[cmodel]][csort]
}
# set up data arrays
nsubs = length(files[[1]])
timepts = c(-4:0, 2)
ntimepts = length(timepts)
prob_timecourses = array(NA, dim = c(ntimepts, nmodels, nsubs))
cLLs = array(NA, dim = c(3, nmodels, nsubs))
cparams = array(NA, dim = c(4, nmodels, nsubs))
# loop over subs and models to get an average data around each leave decision
for (csub in 1:nsubs) {
for (cmodel in 1:nmodels) {
cdat = readMat(file.path(Dir, resultDir, trialwisemodeldatDir, models[cmodel], files[[cmodel]][csub]))$trld
cntrials = length(cdat[,,1]$cchoices)
cswitches = which(cdat[,,1]$cchoices == 2)
nswitch = length(cswitches)
cidx = sapply(cswitches, function(x) x + timepts)
cidx[which(cidx < 1)] = NA
cidx[which(cidx > cntrials)] = NA
for (cswitch in 1:(nswitch-1)) {
cddi = intersect(cidx[,cswitch], cidx[,cswitch+1])
if (length(cddi) > 0) {
cidx[which(cidx[,cswitch] %in% cddi),cswitch] = NA
cidx[which(cidx[,cswitch+1] %in% cddi),cswitch+1] = NA
}
}
prob_timecourses[,cmodel,csub] = rowMeans(sapply(1:nswitch, function(x) cdat[,,1]$allprob[2,cidx[,x]]), na.rm = TRUE)
cexclidx = sort(c(cswitches + 1, which(diff(c(cdat[,,1]$cblock)) > 0), 1))
cinclidx = setdiff(1:cntrials, cexclidx)
cLLs[1:2,cmodel,csub] = tapply(log(cdat[,,1]$cchoice.prob[cinclidx]), cdat[,,1]$cchoices[cinclidx], sum, na.rm = TRUE)
cLLs[3,cmodel,csub] = sum(log(cdat[,,1]$cchoice.prob[cinclidx]))
cparams[,cmodel, csub] = rowMeans(rbind(cdat[,,1]$x1, cdat[,,1]$x2, cdat[,,1]$x3, cdat[,,1]$x4))
}
}
### illustrate timecourses of choice probabilities around switch
pdf(file.path(Dir,plotDir,'timecourses_forced.pdf'), width = 4.2, height = 4.2)
cmeans = apply(prob_timecourses, c(1, 2), mean, na.rm = TRUE)
csds = apply(prob_timecourses, c(1, 2), function(x) sd(x, na.rm = TRUE)/sqrt(length(x)))
matplot(matrix(c((1:6)-0.05, (1:6)+0.05), ncol = 2), cmeans, type = 'o', lwd = 2, bty = 'n', col = ccols[,1], lty = 1, pch = 16, cex.lab = 1.25, cex.axis = 1.25, ylab = 'Avg. p(Leave | Model)', xlab = 'Choice', xaxt = 'n', ylim = c(0,1))
matlines(prob_timecourses[,1,], lty = 1, col = rgb(t(col2rgb(ccols[1,1])/255), alpha = 0.1), lwd = 0.5, type = 'l')
matlines(prob_timecourses[,2,], lty = 1, col = rgb(t(col2rgb(ccols[2,1])/255), alpha = 0.1), lwd = 0.5, type = 'l')
matlines(matrix(c((1:6)-0.05, (1:6)+0.05), ncol = 2), cmeans, type = 'o', lwd = 1.5, col = ccols[,1], lty = 1, pch = 16)
axis(1, at = 1:6, labels = c('-4', '-3','-2', '-1', 'Leave', '+2'), cex.axis = 1.25)
dev.off()
### illustrate timecourses in choice probability differences
pdf(file.path(Dir,plotDir,'timecourses_diffs_forced.pdf'), width = 4.2, height = 4.2)
X = apply(prob_timecourses[,2,], 2, function(x) c(1, 1, 1, 1, 0, 1) - x*c(1, 1, 1, 1, -1, 1)) - apply(prob_timecourses[,1,], 2, function(x) c(1, 1, 1, 1, 0, 1) - x*c(1, 1, 1, 1, -1, 1))
cmeans = apply(X, c(1),  mean, na.rm = TRUE)
csds = apply(X, c(1, 2), function(x) sd(x)/sqrt(length(x)))
plot(cmeans, type = 'o', lwd = 1.5, bty = 'n', col = ccols[2,1], lty = 1, pch = 16, ylim = c(-0.05, 0.1), ylab = 'p(action | GM) - p(action | LM)', xlab = 'Choice', xaxt = 'n', cex.lab = 1.25, cex.axis = 1.25)
matlines(X, lty = 1, col = rgb(t(col2rgb(ccols[2,1])/255), alpha = 0.25), lwd = 0.5, type = 'l')
abline(h = 0)
lines(cmeans, type = 'o', lwd = 1.5, bty = 'n', col = ccols[2,1], lty = 1, pch = 16)
axis(1, at = 1:6, labels = c('-4', '-3','-2', '-1', 'Leave', '+2'), cex.axis = 1.25)
dev.off()
pdf(file.path(Dir,plotDir,'LL_diffs_forced.pdf'), width = 7, height = 4.2)
layout(t(1:2))
cx = sort(cLLs[1,1,] - cLLs[1,2,])
ccolsv = ccols[,1][(cx < 0)*1 + 1]
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.1, cex.lab = 1.1, ylab = 'LL difference', xlab = 'Participants (sorted)', ylim = c(-30, 16))
title('Stay choice')
abline(h = 0)
cx = sort(cLLs[2,1,] - cLLs[2,2,])
ccolsv = ccols[,1][(cx < 0)*1 + 1]
barplot(cx, col = ccolsv, border = 'white', cex.axis = 1.1, cex.lab = 1.1, ylab = 'LL difference', xlab = 'Participants (sorted)', ylim = c(-30, 16))
title('Leave choice')
abline(h = 0)
dev.off()
